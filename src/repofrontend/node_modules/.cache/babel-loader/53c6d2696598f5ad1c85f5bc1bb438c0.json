{"ast":null,"code":"const login = async (username, password) => {\n  let response;\n  let options = {\n    method: 'POST',\n    body: JSON.stringify({\n      \"username\": username,\n      \"password\": password\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n      device_token: localStorage.getItem('deviceToken') ? localStorage.getItem('deviceToken') : ''\n    }\n  };\n  let url = 'api/auth/signin';\n\n  try {\n    response = await fetch(url, options);\n    let body = await response.json();\n    return [body.errorCode === 0, body];\n  } catch (error) {\n    console.log(error);\n    return [false, null];\n  }\n};\n\nconst getProvider = async () => {\n  let response;\n  let options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  options = createTokenHeader(options);\n  let url = '/api/test/admin';\n\n  try {\n    response = await fetch(url, options);\n    let body = await response.json();\n    return [body.errorCode === 0, body];\n  } catch (error) {\n    if (response && response.statusText) {\n      console.log(response.statusText);\n    } else {\n      console.log(error.message);\n    }\n\n    return [false, null];\n  }\n};\n\nconst createTokenHeader = header => {\n  let token = getToken();\n  console.log(token); // token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTcyNDkyNzcxLCJqdGkiOiJmNTE0MTQzYTIwNTU0ODkwOTNkNWEyZDQ2YTMxMjU2OCIsInVzZXJfaWQiOjh9.X1VfjHNv450z4uyQ2-YSuPB2p5ma5G0_OPdpcSFQ8yA';\n\n  if (token) {\n    header.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return header;\n};\n\nconst getToken = () => {\n  return localStorage['/api/auth/signin'];\n};\n\nexport const LoginService = {\n  login,\n  getProvider,\n  createTokenHeader,\n  getToken\n};","map":{"version":3,"sources":["E:/repofrontend/src/Service/Loginservice.js"],"names":["login","username","password","response","options","method","body","JSON","stringify","headers","device_token","localStorage","getItem","url","fetch","json","errorCode","error","console","log","getProvider","createTokenHeader","statusText","message","header","token","getToken","Authorization","LoginService"],"mappings":"AAAA,MAAMA,KAAK,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACxC,MAAIC,QAAJ;AACA,MAAIC,OAAO,GAAG;AACVC,IAAAA,MAAM,EAAE,MADE;AAEVC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,kBAAYP,QADK;AAEjB,kBAAYC;AAFK,KAAf,CAFI;AAOVO,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAELC,MAAAA,YAAY,EAAEC,YAAY,CAACC,OAAb,CAAqB,aAArB,IAAsCD,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAtC,GAA4E;AAFrF;AAPC,GAAd;AAYA,MAAIC,GAAG,GAAG,iBAAV;;AACA,MAAI;AACAV,IAAAA,QAAQ,GAAG,MAAMW,KAAK,CAACD,GAAD,EAAMT,OAAN,CAAtB;AACA,QAAIE,IAAI,GAAG,MAAMH,QAAQ,CAACY,IAAT,EAAjB;AACA,WAAO,CAACT,IAAI,CAACU,SAAL,KAAmB,CAApB,EAAuBV,IAAvB,CAAP;AACH,GAJD,CAKA,OAAOW,KAAP,EAAc;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,CAAC,KAAD,EAAQ,IAAR,CAAP;AACH;AACJ,CAxBD;;AAyBA,MAAMG,WAAW,GAAG,YAAY;AAC5B,MAAIjB,QAAJ;AACA,MAAIC,OAAO,GAAG;AACVC,IAAAA,MAAM,EAAE,KADE;AAEVI,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAFC,GAAd;AAIAL,EAAAA,OAAO,GAAGiB,iBAAiB,CAACjB,OAAD,CAA3B;AACA,MAAIS,GAAG,GAAG,iBAAV;;AACA,MAAI;AACAV,IAAAA,QAAQ,GAAG,MAAMW,KAAK,CAACD,GAAD,EAAMT,OAAN,CAAtB;AACA,QAAIE,IAAI,GAAG,MAAMH,QAAQ,CAACY,IAAT,EAAjB;AACA,WAAO,CAACT,IAAI,CAACU,SAAL,KAAmB,CAApB,EAAuBV,IAAvB,CAAP;AACH,GAJD,CAKA,OAAOW,KAAP,EAAc;AACV,QAAId,QAAQ,IAAIA,QAAQ,CAACmB,UAAzB,EAAqC;AACjCJ,MAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACmB,UAArB;AACH,KAFD,MAEO;AACHJ,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACM,OAAlB;AACH;;AACD,WAAO,CAAC,KAAD,EAAQ,IAAR,CAAP;AACH;AACJ,CArBD;;AAsBA,MAAMF,iBAAiB,GAAIG,MAAD,IAAY;AAClC,MAAIC,KAAK,GAAGC,QAAQ,EAApB;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ,EAFkC,CAGlC;;AACA,MAAIA,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACf,OAAP,CAAekB,aAAf,GAAgC,UAASF,KAAM,EAA/C;AACH;;AACD,SAAOD,MAAP;AACH,CARD;;AASA,MAAME,QAAQ,GAAG,MAAM;AACnB,SAAOf,YAAY,CAAC,kBAAD,CAAnB;AACH,CAFD;;AAGA,OAAO,MAAMiB,YAAY,GAAG;AACxB5B,EAAAA,KADwB;AAExBoB,EAAAA,WAFwB;AAGxBC,EAAAA,iBAHwB;AAIxBK,EAAAA;AAJwB,CAArB","sourcesContent":["const login = async (username, password) => {\r\n    let response\r\n    let options = {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            \"username\": username,\r\n            \"password\": password\r\n\r\n        }),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            device_token: localStorage.getItem('deviceToken') ? localStorage.getItem('deviceToken') : '',\r\n        },\r\n    };\r\n    let url = 'api/auth/signin';\r\n    try {\r\n        response = await fetch(url, options);\r\n        let body = await response.json();\r\n        return [body.errorCode === 0, body];\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n        return [false, null];\r\n    }\r\n};\r\nconst getProvider = async () => {\r\n    let response;\r\n    let options = {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n    };\r\n    options = createTokenHeader(options);\r\n    let url = '/api/test/admin';\r\n    try {\r\n        response = await fetch(url, options);\r\n        let body = await response.json();\r\n        return [body.errorCode === 0, body]\r\n    }\r\n    catch (error) {\r\n        if (response && response.statusText) {\r\n            console.log(response.statusText)\r\n        } else {\r\n            console.log(error.message)\r\n        }\r\n        return [false, null];\r\n    }\r\n};\r\nconst createTokenHeader = (header) => {\r\n    let token = getToken();\r\n    console.log(token);\r\n    // token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTcyNDkyNzcxLCJqdGkiOiJmNTE0MTQzYTIwNTU0ODkwOTNkNWEyZDQ2YTMxMjU2OCIsInVzZXJfaWQiOjh9.X1VfjHNv450z4uyQ2-YSuPB2p5ma5G0_OPdpcSFQ8yA';\r\n    if (token) {\r\n        header.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return header;\r\n}\r\nconst getToken = () => {\r\n    return localStorage['/api/auth/signin'];\r\n}\r\nexport const LoginService = {\r\n    login,\r\n    getProvider,\r\n    createTokenHeader,\r\n    getToken,\r\n\r\n}; "]},"metadata":{},"sourceType":"module"}